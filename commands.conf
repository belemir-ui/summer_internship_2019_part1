/* Command objects */

/* Notification Commands
 *
 * Please check the documentation for all required and
 * optional parameters.
 */

object NotificationCommand "mail-host-notification" {
  command = [ SysconfDir + "/icinga2/scripts/mail-host-notification.sh" ]

  arguments += {
    "-4" = "$notification_address$"
    "-6" = "$notification_address6$"
    "-b" = "$notification_author$"
    "-c" = "$notification_comment$"
    "-d" = {
      required = true
      value = "$notification_date$"
    }
    "-f" = {
      value = "$notification_from$"
      description = "Set from address. Requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE)"
    }
    "-i" = "$notification_icingaweb2url$"
    "-l" = {
      required = true
      value = "$notification_hostname$"
    }
    "-n" = {
      required = true
      value = "$notification_hostdisplayname$"
    }
    "-o" = {
      required = true
      value = "$notification_hostoutput$"
    }
    "-r" = {
      required = true
      value = "$notification_useremail$"
    }
    "-s" = {
      required = true
      value = "$notification_hoststate$"
    }
    "-t" = {
      required = true
      value = "$notification_type$"
    }
    "-v" = "$notification_logtosyslog$"
  }

  vars += {
    notification_address = "$address$"
    notification_address6 = "$address6$"
    notification_author = "$notification.author$"
    notification_comment = "$notification.comment$"
    notification_type = "$notification.type$"
    notification_date = "$icinga.long_date_time$"
    notification_hostname = "$host.name$"
    notification_hostdisplayname = "$host.display_name$"
    notification_hostoutput = "$host.output$"
    notification_hoststate = "$host.state$"
    notification_useremail = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  command = [ SysconfDir + "/icinga2/scripts/mail-service-notification.sh" ]

  arguments += {
    "-4" = "$notification_address$"
    "-6" = "$notification_address6$"
    "-b" = "$notification_author$"
    "-c" = "$notification_comment$"
    "-d" = {
      required = true
      value = "$notification_date$"
    }
    "-e" = {
      required = true
      value = "$notification_servicename$"
    }
    "-f" = {
      value = "$notification_from$"
      description = "Set from address. Requires GNU mailutils (Debian/Ubuntu) or mailx (RHEL/SUSE)"
    }
    "-i" = "$notification_icingaweb2url$"
    "-l" = {
      required = true
      value = "$notification_hostname$"
    }
    "-n" = {
      required = true
      value = "$notification_hostdisplayname$"
    }
    "-o" = {
      required = true
      value = "$notification_serviceoutput$"
    }
    "-r" = {
      required = true
      value = "$notification_useremail$"
    }
    "-s" = {
      required = true
      value = "$notification_servicestate$"
    }
    "-t" = {
      required = true
      value = "$notification_type$"
    }
    "-u" = {
      required = true
      value = "$notification_servicedisplayname$"
    }
    "-v" = "$notification_logtosyslog$"
  }

  vars += {
    notification_address = "$address$"
    notification_address6 = "$address6$"
    notification_author = "$notification.author$"
    notification_comment = "$notification.comment$"
    notification_type = "$notification.type$"
    notification_date = "$icinga.long_date_time$"
    notification_hostname = "$host.name$"
    notification_hostdisplayname = "$host.display_name$"
    notification_servicename = "$service.name$"
    notification_serviceoutput = "$service.output$"
    notification_servicestate = "$service.state$"
    notification_useremail = "$user.email$"
    notification_servicedisplayname = "$service.display_name$"
  }
}

object CheckCommand "ssh_disk" {
        import "plugin-check-command"

        command = [ PluginDir + "/check_by_ssh" ]

        arguments = {
                "-H" = "$ssh_hostname$"
                "-C" = "$ssh_command_disk$"
                "-l" = "$ssh_remote_user$"
                "-i" = "$ssh_identity$"
				"-t" = "$ssh_timemout$"
                }
        vars.ssh_hostname = "$address$"
        vars.ssh_remote_user = "appicing"
        vars.ssh_identity = "/srv/icingaKeys/check_disk"
        vars.ssh_command_disk = " -w 10% -c 5%"
        vars.ssh_timemout = 300
}

object CheckCommand "ssh_load" {
        import "plugin-check-command"

        command = [ PluginDir + "/check_by_ssh" ]

        arguments = {
                "-H" = "$ssh_hostname$"
                "-C" = "$ssh_command_load$"
                "-l" = "$ssh_remote_user$"
                "-i" = "$ssh_identity$"
		"-t" = "$ssh_timeout$"
                }
        vars.ssh_hostname = "$address$"
        vars.ssh_remote_user = "appicing"
        vars.ssh_identity = "/srv/icingaKeys/check_cpu"
        vars.ssh_command_load = " -w 5,4,3 -c 10,6,4"
        vars.ssh_timeout = 300
}

object CheckCommand "checkAuth" {
        import "plugin-check-command"
	command = [ CustomPluginDir + "/checkAuth" ]
        arguments = {
                "-H" = "$ssh_hostname$"
                "-l" = "$ssh_remote_user$"
                "-i" = "$ssh_identity$"
                }
        vars.ssh_hostname = "$address$"
        vars.ssh_remote_user = "appicing"
        vars.ssh_identity = "/srv/icingaKeys/check_auth"
	
        #command = [ "/checkAuth.py" ]
}

object CheckCommand "checkAuth2" {
        import "plugin-check-command"

        command = [ CustomPluginDir + "/checkAuth.py" ]
}


object CheckCommand "http_check" {
        import "plugin-check-command"

        command = [ PluginDir + "/check_http" ]

        arguments = {
                "-H" = "$http_host$"
                "-p" = "$http_port$"
                "-u" = "$http_url$"
                "-s" = "$http_string$"
                "-S" = {
                  description = "Enable SSL/TLS"
                  set_if = "$http_ssl$"
                }
                "-f" = {
                 value= "$http_redirect$"
                 description="Output when redirected (default: warning)"
                }
        }
        vars.http_url = "/"
        vars.http_redirect = "warning"
        vars.http_ssl = "true"
        vars.http_port = "443"
}
object CheckCommand "http_certificate" {
        import "plugin-check-command"

        command = [ PluginDir + "/check_http" ]

        arguments = {
                "-H" = "$http_host$"
                "-C" = "$http_cert_exp$"
                "-u" = "$http_url$"
        }
        vars.http_cert_exp = "14,7"
        vars.http_url = "/"
}

/*
 * If you prefer to use the notification scripts with environment
 * variables instead of command line parameters, you can use
 * the following commands. They have been updated from < 2.7
 * to support the new notification scripts and should help
 * with an upgrade.
 * Remove the comment blocks and comment the notification commands above.
 */

/*

object NotificationCommand "mail-host-notification" {
  command = [ SysconfDir + "/icinga2/scripts/mail-host-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTDISPLAYNAME = "$host.display_name$"
    HOSTNAME = "$host.name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  command = [ SysconfDir + "/icinga2/scripts/mail-service-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICENAME = "$service.name$"
    HOSTNAME = "$host.name$"
    HOSTDISPLAYNAME = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}

*/

